searchState.loadedDescShard("virtio_spec", 0, "This crate provides common definitions from the Virtio 1.2 …\nThis feature indicates that the device can be used on a …\nIndicates that the guest OS has found the device and …\nAudio policy device\nmemory ballooning (traditional)\nblock device\nBluetooth device\nvirtio CAIF\nCAN device\nTimer/Clock device\nconsole\nCrypto device\nIndicates that the device has experienced an error from …\nIndicates that the guest OS knows how to drive the device.\nIndicates that the driver is set up and ready to drive the …\nDevice Status Field\nThis feature enables the <em>used_event</em> and the <em>avail_event</em> …\nDevice-independent Feature Bits\nIndicates that something went wrong in the guest, and it …\nIndicates that the driver has acknowledged all the …\nFeature Bits\nfile system device\nGPIO device\nGPU device\nI2C adapter\nNegotiating this feature indicates that the driver can use …\nThis feature indicates that all buffers are used by the …\nVirtio Device IDs\nInput device\nioMemory\nIOMMU device\nmac80211 hwsim wireless simulation device\nmac80211 wlan\nMemory device\nmemory balloon\nThis feature indicates that the driver passes extra data …\nThis feature indicates that the driver uses the data …\nnetwork card\n9P transport\nNitroSecureModule\nThis feature indicates that memory accesses by the driver …\nParameter Server\nPMEM device\npstore device\nThis feature indicates support for the packed virtqueue …\nThis feature indicates that the driver can reset a queue …\nRDMA device\nreserved (invalid)\nentropy source\nRPMB device\nrpmsg\nrproc serial\nThis feature indicates that the device supports Single …\nSCMI device\nSCSI host\nSignal Distribution Module\nAudio device\nUnknown device\nThis indicates compliance with this specification, giving …\nVideo decoder device\nVideo encoder device\nSocket device\nWatchdog\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nA 128-bit unsigned integer stored in big-endian byte order.\nA 16-bit unsigned integer stored in big-endian byte order.\nA 32-bit unsigned integer stored in big-endian byte order.\nA 64-bit unsigned integer stored in big-endian byte order.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the device-independent feature bits while …\nReturns the device-independent feature bits while …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nFile System Device\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nA 128-bit unsigned integer stored in little-endian byte …\nA 16-bit unsigned integer stored in little-endian byte …\nA 32-bit unsigned integer stored in little-endian byte …\nA 64-bit unsigned integer stored in little-endian byte …\nDefinitions for Virtio over MMIO.\nNetwork Device\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefinitions for Virtio over PCI bus.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the feature that this feature requires.\nReturns the feature that this feature requires.\nReturns <code>true</code> if all internal feature requirements are …\nReturns <code>true</code> if all internal feature requirements are …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVolatile Pointer Types.\nDevice-independent Bit. See <code>virtio::F::ACCESS_PLATFORM</code>.\nDevice-independent Bit. See <code>virtio::F::EVENT_IDX</code>.\nFile System Device Feature Bits\nDevice-independent Bit. See <code>virtio::F::INDIRECT_DESC</code>.\nDevice-independent Bit. See <code>virtio::F::IN_ORDER</code>.\nDevice has support for FUSE notify messages.  The …\nDevice-independent Bit. See <code>virtio::F::NOTIFICATION_DATA</code>.\nDevice-independent Bit. See <code>virtio::F::NOTIF_CONFIG_DATA</code>.\nDevice-independent Bit. See <code>virtio::F::ORDER_PLATFORM</code>.\nDevice-independent Bit. See <code>virtio::F::RING_PACKED</code>.\nDevice-independent Bit. See <code>virtio::F::RING_RESET</code>.\nDevice-independent Bit. See <code>virtio::F::SR_IOV</code>.\nDevice-independent Bit. See <code>virtio::F::VERSION_1</code>.\nGet a flags value with all known bits set.\nReturns a mutable reference to the device-independent …\nReturns a shared reference to the device-independent …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConfiguration Change Notification\nMMIO Device Registers\nMMIO Device Registers\nMMIO Device Registers\nInterrupt Status\nNotification Data.\nUsed Buffer Notification\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConfiguration space\nConfiguration atomicity value\nWhether all set bits in a source flags value are also set …\nFlags representing features the device supports\nDevice (host) features word selection.\nVirtio Subsystem Device ID\nThe intersection of a source flags value with the …\nFlags representing device features understood and …\nActivated (guest) features word selection\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInterrupt acknowledge\nInterrupt status\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMagic Value\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nVirtual queue’s Descriptor Area 64 bit long physical …\nVirtual queue’s Descriptor Area 64 bit long physical …\nVirtual queue’s Descriptor Area 64 bit long physical …\nVirtual queue’s Device Area 64 bit long physical address\nVirtual queue’s Device Area 64 bit long physical address\nVirtual queue’s Device Area 64 bit long physical address\nVirtual queue’s Driver Area 64 bit long physical address\nVirtual queue’s Driver Area 64 bit long physical address\nVirtual queue’s Driver Area 64 bit long physical address\nQueue notifier\nVirtual queue size\nMaximum virtual queue size\nVirtual queue ready bit\nVirtual queue reset bit\nVirtual queue index\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShared memory region 64 bit long physical address\nShared memory region 64 bit long physical address\nShared memory region 64 bit long physical address\nShared memory region 64 bit long length\nShared memory region 64 bit long length\nShared memory region 64 bit long length\nShared memory id\nDevice status\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVirtio Subsystem Vendor ID\nDevice version number\nDevice-independent Bit. See <code>virtio::F::ACCESS_PLATFORM</code>.\nDevice handles packets with partial checksum.   This …\nControl channel offloads reconfiguration support.\nSet MAC address through control channel.\nControl channel RX mode support.\nControl channel VLAN filtering.\nControl channel is available.\nNetwork Device Configuration Layout\nNetwork Device Configuration Layout\nDevice-independent Bit. See <code>virtio::F::EVENT_IDX</code>.\nNetwork Device Feature Bits\nDriver can send gratuitous packets.\nDriver handles packets with partial checksum.\nDriver can receive TSO with ECN.\nDriver can provide the exact <em>hdr_len</em> value. Device …\nDriver can receive TSOv4.\nDriver can receive TSOv6.\nDriver can receive UFO.\nDevice can report per-packet hash value and a type of …\nDevice can receive TSO with ECN.\nDevice can receive TSOv4.\nDevice can receive TSOv6.\nDevice can receive UFO.\nDevice can receive USO packets. Unlike UFO (fragmenting …\nNetwork Device Header\nNetwork Device Header Flags\nNetwork Device Header GSO Type\nNetwork Device Header Hash Report\nDevice-independent Bit. See <code>virtio::F::INDIRECT_DESC</code>.\nDevice-independent Bit. See <code>virtio::F::IN_ORDER</code>.\nDevice has given MAC address.\nDevice supports multiqueue with automatic receive steering.\nDriver can merge receive buffers.\nDevice maximum MTU reporting is supported. If offered by …\nDevice-independent Bit. See <code>virtio::F::NOTIFICATION_DATA</code>.\nDevice-independent Bit. See <code>virtio::F::NOTIF_CONFIG_DATA</code>.\nDevice-independent Bit. See <code>virtio::F::ORDER_PLATFORM</code>.\nDevice-independent Bit. See <code>virtio::F::RING_PACKED</code>.\nDevice-independent Bit. See <code>virtio::F::RING_RESET</code>.\nDevice can process duplicated ACKs and report number of …\nDevice supports RSS (receive-side scaling) with Toeplitz …\nNetwork Device Status Flags\nDevice reports speed and duplex.\nDevice-independent Bit. See <code>virtio::F::SR_IOV</code>.\nDevice may act as a standby for a primary device with the …\nConfiguration status field is available.\nDevice-independent Bit. See <code>virtio::F::VERSION_1</code>.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns a mutable reference to the device-independent …\nReturns a shared reference to the device-independent …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nOnly if VIRTIO_NET_F_HASH_REPORT negotiated\nOnly if VIRTIO_NET_F_HASH_REPORT negotiated\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOnly if VIRTIO_NET_F_HASH_REPORT negotiated\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nPCI Capability\nPCI Capability 64\nPCI Capability Configuration Type\nPCI Capability Data\nPCI Configuration Capability\nCommon configuration\nCommon configuration structure\nCommon configuration structure\nCommon configuration structure\nDevice Configuration Interrupt\nDevice specific configuration\nISR Status\nISR Status\nNotification Data.\nNotifications\nPCI Notify Capability\nPCI configuration access\nQueue Interrupt\nShared memory region\nUnknown device\nVendor-specific data\nGet a flags value with all known bits set.\nWhere to find it.\nWhere to find it.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGeneric PCI field: capability length\nGeneric PCI field: next ptr.\nGeneric PCI field: <code>PCI_CAP_ID_VNDR</code>\nIdentifies the structure.\nIdentifies the structure.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConfiguration atomicity value.  The device changes this …\nThe driver sets the Configuration Vector for MSI-X.\nWhether all set bits in a source flags value are also set …\nThe device uses this to report which feature bits it is …\nThe driver uses this to select which feature bits …\nThe driver writes the device status here (see <code>DeviceStatus</code>…\nThe intersection of a source flags value with the …\nThe driver writes this to accept feature bits offered by …\nThe driver uses this to select which feature bits …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from bits.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nMultiple capabilities of the same type\nMultiple capabilities of the same type\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into bits.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLength of the structure, in bytes.\nLength of the structure, in bytes.\nCreates a new default initialized bitfield.\nOffset within the ring where the next available ring entry …\nWrap Counter. With <code>VIRTIO_F_RING_PACKED</code> this is the wrap …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nMultiplier for queue_notify_off.\nMultiplier for queue_notify_off.\nThe device specifies the maximum number of virtqueues …\nOffset within bar.\nOffset within bar.\nPad to full dword.\nData for BAR access.\nThe driver writes the physical address of Device Area …\nThe driver writes the physical address of Descriptor Area …\nThe driver writes the physical address of Descriptor Area …\nThe driver writes the physical address of Device Area …\nThe driver writes the physical address of Device Area …\nThe driver writes the physical address of Device Area …\nThe driver writes the physical address of Device Area …\nThe driver writes the physical address of Driver Area …\nThe driver writes the physical address of Driver Area …\nThe driver uses this to selectively prevent the device …\nThe driver uses this to specify the queue vector for MSI-X.\nThis field exists only if <code>VIRTIO_F_NOTIF_CONFIG_DATA</code> has …\nThe driver reads this to calculate the offset from start …\nThe driver uses this to selectively reset the queue. This …\nQueue Select. The driver selects which virtqueue the …\nQueue Size.  On reset, specifies the maximum queue size …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nOffset within the ring where the next available ring entry …\nWrap Counter. With <code>VIRTIO_F_RING_PACKED</code> this is the wrap …\nVQ number to be notified.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nVQ number to be notified.\nOffset within the ring where the next available ring entry …\nWrap Counter. With <code>VIRTIO_F_RING_PACKED</code> this is the wrap …\nVQ number to be notified.\nA trait for fields that can be accessed via …\nAn overaligned volatile pointer for fields that require …\nA wide volatile pointer for 64-bit fields.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts to this type from the overaligned field.\nCreates a new wide volatile pointer from pointers to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this type into the overaligned field.\nCreates a new overaligned volatile pointer.\nPerforms a volatile read of the contained value.\nPerforms a volatile read of the contained value.\nPerforms a volatile read of the contained value.\nUpdates the contained value using the given closure and …\nUpdates the contained value using the given closure and …\nUpdates the contained value using the given closure and …\nPerforms a volatile write, setting the contained value to …\nPerforms a volatile write, setting the contained value to …\nPerforms a volatile write, setting the contained value to …")